СТЕК- ТРУПАЩ ЕДНА СЛЕД ДРУГА ДАННИ И МОЖЕ ДА ДОСТЪПИШ САМО ТАЗИ НАЙ- ОТГОРЕ И НАДОЛУ ПОД РЕД.
ОПАШКА- ТРУПАТ СЕ ДАННИ И СЕ ВЗЕМАТ ПО РЕДА НА ПРИЕМАНЕ КАТО В МАГАЗИН. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
map !!!!     РАботи като цикъл! Минава през всеки елемент.
map - Функцията създава нов масив и не променя нашия. 
[1,2.3.4] - първия масив arr!
map1 = arr.map(el => el*2);
map1= [2,4,6,8]   - това е новия масив, като е извършено действието *2 на всеки индекс и е прехвърлено на мястото
му в новия масив. 

При конвертиране от стринг номер: converedArr= arr.map(+el) но е по- правилно да се напише:
converedArr= arr.map(Number);  Number се пише така, защото е конструктор функция. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
concat !!!      съединява двата масива! 
let arr = [1,2];

let length = arr.concat([3,4,5]);
length = [1,2,3,4,5]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
filter !!! работи с функции които имат 2 отговора - true или false.  РАботи като цикъл! Минава през всеки елемент.
let arr = [ 9, 2, 8, 6, 98];
let removed = arr.filter(x => x >7); 
Запазва се стария масив като се създава и нов с филтрираните стойности отговарящи на критериите.
[9, 8, 98] - тези елементи които изпълняват true се включват в новия масив, тези които изпълняват false не се вкл.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sort !!!  алгоритмуването не работи коректно. За масив: let arr = [9, 2 ,8, 6, 98, 1000];  Сорт е функция, която променя масива!!!
Пишем: let sorted = arr.sort((a,b) => a - b);      // Ако се запише :b-a - ще сортира в обратен ред.
Получаваме подредения масив [ 2, 6, 8, 9, 98, 1000 ]
Ако не искаме да променяме масива може да се комбинира със slice  и да се направи сортирано копие на масива.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REDUCE, MAP, FILTER, SORT ,SPLIT-,,REVERSE ,, ПОДОБРЕНИЕ!!!
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
join - превтъща масив в стринг.  splitovete = ["alpha", "beta"," gamma", "beta"]
splitovete.join("-"));
връща стринг-   "alpha-beta-gamma-beta"


от масив [-2, 7, 8, 9]
    console.log(res.join('\n')) - връща на отделни редове:  -2
                                                                                        7
                                                                                        8
                                                                                        9
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
push - променя масива!
let arr= [1, 2];

let length = arr.push([3, 4, 5])
console.log(arr)   връша [1, 2, 3, 4, 5]
console.log(length);  Връща дължината на модифицирания масив. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
concat !!! Функцията обединява два масива.
let arr= [1, 2];

let length = arr.push(3, 4, 5)
console.log(arr)   връша [1, 2] запазило е оригиналния масив.
console.log(length);  [1, 2, 3, 4, 5]  връща обединения масив.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Здравей, 
беше ми хубаво, че ми се обади вчера и танцувахме. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------