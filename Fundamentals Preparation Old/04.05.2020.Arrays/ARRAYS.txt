Когато ключът е стринг го закача към обекта, когато е число го закача към масива!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
---------------------------------------
const arr = [5]; - задаване стойността на нулевия елемент.
new Array (12); -  -задължаваме функцията да върне "dis", а не "Undefined". Написан по този начин израза можем да променим интервала.
има дължина 12 като тя може да се увеличава и намалява в последствие.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+arr - превръща "" в Number - унарен оператор защото има един опериран елемент "арр".
7+8 се казва бинарен оператор, защото има два елемента "7" и "8".
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const arr = ['0','3','5','Pesho',[2,4];    // за да  достъпя 4 от елемента [2,4]; изписвам:
console.log([arr[4,1];           // тъй като [2,4] е 4 ти елемент от масива, а 4 е първи елемент от елемента [2,4]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const arr = ["10","20","30"]; // това е масив!
arr[0] = 5; //Елемента може да бъде модифициран и от 10 ще стане 5;
console.log(arr); // резултат [5,20,30]
//////////////////////////////////////////////////////////
console.log(arr.includes(20));  // true /проверка дали някакво число се съдържа в масива.
console.log(arr.includes(0));  // false 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CHROME// f12  отваря конзола. С изписването на arr.  се отваря за дописване меню с възможности като функционалност.
Показано е "unshift" незаконно :D 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
показва 3тия индекс?!?!?!?!?
console.log((arr.indexOf("3")));
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const str = "Zdrasti";
console.log(str.indexOf("r"))    // печата 2, защото "r" е втори индекс.
console.log(str.indexOf("o"))    //печата -1, защото "о" не е част от стринга и -1 е индикатор за това.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
let capitals = ["Sofia","Washington",London"];

for (let i=0; i < capitals.length; i++){   // ако вместо i++ напиша i+=2 ще итерирам през 2;
    console.log(capitals[i]);
}
console.log(capitals.toString()); //    превръща масива във стринг; //Sofia","Washington",London
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function solve(num, arr){                                         // използва се много когато се работи с  index - и.
arr= arr.slice(1,4)
console.log(arr.reverse().join(' '));      //резултат 40 30 20
}
solve(3, [10, 20, 30, 40, 50]);
slice - реже масива от определен индекс до друг (не включително); От резултата се вижда, че крайния интервал е 4 ти(50) но печата трети.
slice- ПРАВИ КОПИЕ НА МАСИВА И ПРАВИ ИНТЕРВЕНЦИИ В НЕГО.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
splice.
let removedItem = fruits.splice(pos, 1) // this is how to remove an item        //отрязаните елементи са в removedItem//
                                        
// ["Strawberry", "Mango"]
splice - ОПЕРИРА ДИРЕКТНО В МАСИВА!
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
for in loop - използва се за обекти, никога за масиви! изразява стойностите на ключовете.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
for of loop - има поведеннието на For loop. Подходящ е за работа с масиви!

const arr = [1, 2, 3];

arr[8]=6;
arr["Pesho"]=89;
arr[-9]=90;

for (let item of arr){
    console.log(item);
}                                                // печата: 1, 2, 3 ,(5 пъти undefined),6

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
forEach -елиминира всички грозни неща в масива. Отново показва стрингове но отсява и показва само значещите елементи -другите не.
const arr = [1, 2, 3, `ooo`];   

arr[8]=6;
arr["Pesho"]= 89;
arr[-9]=90;
arr.forEach((el. i, ar) => console.log(el,i));

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function solve(arr){                                     //  ако зададем : arr[9]=89; ще изкара 0,1,2,3,9 ти Index като междинните (празни няма отрази)

arr.forEach((el, i, arr) => console.log(el,i));  // запис на един ред foreach loop        //el = element  //i = индекса до който е достигнал цикъла   //arr = самия масив като може името да е същото или да е друго ar например

arr.forEach(myFunction);                               // запис на 3 реда  foreach loop
function myFunction(item, index, arr) {
    console.log(arr[index],index);
  } 

}  
solve(["apple", "orange", "cherry","0"])
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];

console.log(plants.pop());
// expected output: "tomato"

pop - хваща последния елемент от масива.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
num.shift - маха елемент от лявата страна на масива.
num.unshift - добавя елементи от лявата страна на масива. За разлика  от "pop" който работи с края на масива.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
push
Add to the end of an Array

let newLength = fruits.push('Orange')   // били са "Apple","Banana" - добавяме елемента в скобите на push "Orange"
// ["Apple", "Banana", "Orange"] 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
reduce 
console.log( 
[1, 2, 3, 4].reduce((a,b) => a+b, 0))   \\ събира (((1+2)+3)+4)
console.log(
 [].reduce((a,b)=> a+b, 0))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function name(arr) {                                          // (arr[i]); i върти в цикъла елементите на масива  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    let sumBefore=0;
    let sumAfter=0;
     for (let i=0; i<=4; i++){
        console.log(arr[i]);
     }
     
 }
 name([5, 15, 23, 56, 35]);
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
split !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Методът split () разделя String в подреден набор от подстраници, поставя тези подтези в масив и връща масива. 
Разделянето се извършва чрез търсене на шаблон; където шаблонът е предоставен като първи параметър в призива на метода.
const str = 'The quick brown fox jumps over the lazy dog.';

const words = str.split(' ');  СЪЗДАВА МАСИВА  ЦЯЛ;
console.log(words[3]);
// expected output: "fox"

const chars = str.split(''); /СЪЗДАВА МАСИВА РАЗДЕЛЕН НА ЕЛЕМЕНТИ СЪС ЗАПЕТАЯ;
console.log(chars[8]);
// expected output: "k"

const strCopy = str.split();
console.log(strCopy);
// expected output: Array ["The quick brown fox jumps over the lazy dog."]
Пример split :
Входни данни: ['Sofia | 42.696552 | 23.32601',
                          'Beijing | 39.913818 | 116.363625'];

let townsZ = i.split(' | ');
 Изходни данни:  [ 'Sofia', '42.696552', '23.32601' ]                   //На практика е заменило " | " със естествения вид на масива - разделяне на елементи със запетая!
                               [ 'Beijing', '39.913818', '116.363625' ]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------------------------------------------------------------------------
вход:    arr- ['Sofia | 42.696552 | 23.32601',
                  'Beijing | 39.913818 | 116.363625'];

for (const row of arr) {
    const [town, latitude ,longitude] = row.split(' | ');
    
console.log(town,latitude ,longitude)

записа връща едновременно стойностите и за трите ключа като ги разпределя. Резултата е: (ВАЖНО! ПОЛУЧЕНИЯ РЕЗУЛТАТ НЕ Е МАСИВ, ВЪПРЕКИ ЧЕ Е В КВАДРАТНИ СКОБИ)
Sofia 42.696552 23.32601                                                            Със записа се казва, че винаги първия индекс ще ми е "town", втория ще бъде "latitude", третия ще бъде "longitude".
Beijing 39.913818 116.363625                                                  При липса на графа в някоя стойност, тя връща undefinied
Супер е!
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ако искам да достигна някой елемент на обекта:
store.beer- но ако това е променлива пишем:
store[product]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if(store.hasOwnProperty(product))   -  hasOwnProperty - ПРОВЕРЯВА ДАЛИ ИМЕТО от (product) конкретно за итерацията се съдържа в обекта!!!

  или sofia. hasOwnProperty(`name`)  //проверява в обекта sofia дали има ключ "name" ;
Другия начин е с проверка:
if(sofia.age === undenfined)
   console.log("Key 'age' does not exist'')
if(sofia.name !== undefined)
   console.log("Key `name` exists");
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Оператора "." във обекти, е както за добавяне, така и за заместване.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Когато получим обекта в стринг веднага го минаваме към числоо с JSON.parse(); за да може да е годен за работа.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
for in цикъла върти стойностите по индекс (на дълбоко) for of върти стойностите - по- навън.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
СТЕК- ТРУПАЩ ЕДНА СЛЕД ДРУГА ДАННИ И МОЖЕ ДА ДОСТЪПИШ САМО ТАЗИ НАЙ- ОТГОРЕ И НАДОЛУ ПОД РЕД.
ОПАШКА- ТРУПАТ СЕ ДАННИ И СЕ ВЗЕМАТ ПО РЕДА НА ПРИЕМАНЕ КАТО В МАГАЗИН. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
map !!!!     РАботи като цикъл! Минава през всеки елемент.
map - Функцията създава нов масив и не променя нашия. 
[1,2.3.4] - първия масив arr!
map1 = arr.map(el => el*2);
map1= [2,4,6,8]   - това е новия масив, като е извършено действието *2 на всеки индекс и е прехвърлено на мястото
му в новия масив. 

При конвертиране от стринг номер: converedArr= arr.map(+el) но е по- правилно да се напише:
converedArr= arr.map(Number);  Number се пише така, защото е конструктор функция. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
concat !!!      съединява двата масива! 
let arr = [1,2];

let length = arr.concat([3,4,5]);
length = [1,2,3,4,5]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
filter !!! работи с функции които имат 2 отговора - true или false.  РАботи като цикъл! Минава през всеки елемент.
let arr = [ 9, 2, 8, 6, 98];
let removed = arr.filter(x => x >7); 
Запазва се стария масив като се създава и нов с филтрираните стойности отговарящи на критериите.
[9, 8, 98] - тези елементи които изпълняват true се включват в новия масив, тези които изпълняват false не се вкл.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sort !!!  алгоритмуването не работи коректно. За масив: let arr = [9, 2 ,8, 6, 98, 1000];  Сорт е функция, която променя масива!!!
Пишем: let sorted = arr.sort((a,b) => a - b);      // Ако се запише :b-a - ще сортира в обратен ред.
Получаваме подредения масив [ 2, 6, 8, 9, 98, 1000 ]
Ако не искаме да променяме масива може да се комбинира със slice  и да се направи сортирано копие на масива.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REDUCE, MAP, FILTER, SORT ,SPLIT-,,REVERSE ,, ПОДОБРЕНИЕ!!!
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
join - превтъща масив в стринг.  splitovete = ["alpha", "beta"," gamma", "beta"]
splitovete.join("-"));
връща стринг-   "alpha-beta-gamma-beta"


от масив [-2, 7, 8, 9]
    console.log(res.join('\n')) - връща на отделни редове:  -2
                                                                                        7
                                                                                        8
                                                                                        9
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
push - променя масива!
let arr= [1, 2];

let length = arr.push([3, 4, 5])
console.log(arr)   връша [1, 2, 3, 4, 5]
console.log(length);  Връща дължината на модифицирания масив. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
concat !!! Функцията обединява два масива.
let arr= [1, 2];

let length = arr.push(3, 4, 5)
console.log(arr)   връша [1, 2] запазило е оригиналния масив.
console.log(length);  [1, 2, 3, 4, 5]  връща обединения масив.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
split  !!!!!!!!! Разделя масив който е разделен с определени символни разделители със запетая или нещо такова.

solution  (['Sofia | 42.696552 | 23.32601',
    'Beijing | 39.913818 | 116.363625']);      обработваме със split и получаваме.

function solution(arr) {
    secArr = [];
        for (let i=0; i<arr.length; i++) {
        
        secArr= arr[i].split(" | ")
            console.log(secArr);   
        }
    }                      получаваме.
[ 'Sofia', '42.696552', '23.32601' ]
[ 'Beijing', '39.913818', '116.363625' ] 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
join join(" ") или например: join(" ") разделя стринга, така както искам да бъде - с интервал запетая или по друг начин.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




